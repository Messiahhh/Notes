{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{68:function(e,r,t){\"use strict\";t.r(r);var o=t(0),v=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,t=e._self._c||r;return t(\"div\",{staticClass:\"content\"},[t(\"h1\",{attrs:{id:\"理解promise对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#理解promise对象\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 理解Promise对象\")]),t(\"p\",[t(\"a\",{attrs:{href:\"https://promisesaplus.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Promise/A+规范\")])]),t(\"p\",[t(\"a\",{attrs:{href:\"https://segmentfault.com/a/1190000002452115\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"完整规范的中文翻译\")])]),t(\"h3\",{attrs:{id:\"术语\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#术语\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 术语\")]),t(\"p\",[e._v(\"promise是个遵循Promise/A+规范且部署了then方法的对象或函数\")]),t(\"p\",[e._v(\"thenable是个部署了then方法的对象或函数\")]),t(\"p\",[e._v(\"value是个合法的JavaScript值（包括undefined，thenable，promise）\")]),t(\"p\",[e._v(\"exception是个通过\"),t(\"code\",[e._v(\"throw\")]),e._v(\"抛出的值\")]),t(\"p\",[e._v(\"reason是指出为何promise变为rejected的理由\")]),t(\"h3\",{attrs:{id:\"promise\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#promise\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Promise\")]),t(\"p\",[e._v(\"Promise是个对象， 它必须处于下面三种状态中的一种，pending（进行中），fulfilled（成功），rejected（失败）\")]),t(\"ul\",[t(\"li\",[e._v(\"处于pending的时候，可以转化成fulfilled或rejected\")]),t(\"li\",[e._v(\"处于fulfilled的时候，不能转化成其他状态；且promise对象需要拥有value值\")]),t(\"li\",[e._v(\"处于rejected的时候，不能转化成其他状态；且promise对象需要拥有reason值\")])]),t(\"p\",[e._v(\"注：下文会用fulfilled promise with x / rejected promise with x。应该不难理解。\")]),t(\"h3\",{attrs:{id:\"生成promise对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生成promise对象\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 生成Promise对象\")]),t(\"p\",[e._v(\"使用\")]),t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"new Promise((resolve, reject) => {\\n    \\n})\\n\")])]),t(\"p\",[e._v(\"会返回一个Promise对象，初始状态是pending。\")]),t(\"p\",[e._v(\"当调用resolve函数的时候\")]),t(\"ul\",[t(\"li\",[e._v(\"当resolve的参数不是promise对象， fulfilled promise with x\")]),t(\"li\",[e._v(\"当resolve的参数是promise对象，promise的状态会随着参数的promise的状态改变。\")])]),t(\"p\",[e._v(\"当调用reject函数的时候，Promise对象会转化成rejected状态，且把reject的函数参数传递给reason。\")]),t(\"h3\",{attrs:{id:\"then方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#then方法\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" then方法\")]),t(\"p\",[e._v(\"Promise对象上部署了then方法，此方法接受两个函数参数\")]),t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"promise.then(onFulfilled, onRejected)\\n\")])]),t(\"p\",[e._v(\"当promise对象的状态为fulfilled，会调用onFulfilled函数。并且会把promise对象的value传递给onFulfilled函数的参数中。\")]),t(\"p\",[e._v(\"当promise对象的状态为rejected，会调用onRejected函数。并且会把promise对象的reason传递给onRejected函数的参数中。\")]),t(\"p\",[e._v(\"除此之外，then方法会返回一个Promise对象\")]),t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"promise2 = promise1.then(onFulfilled, onRejected);\\n\")])]),t(\"p\",[e._v(\"1.如果\"),t(\"code\",[e._v(\"onFulfilled\")]),e._v(\" 或 \"),t(\"code\",[e._v(\"onRejected\")]),e._v(\"返回了一个值x\")]),t(\"ul\",[t(\"li\",[t(\"p\",[e._v(\"若x不是promise对象，那么fulfilled promise2 with x。\")])]),t(\"li\",[t(\"p\",[e._v(\"若x是promise对象，那么\")]),t(\"ul\",[t(\"li\",[e._v(\"若x为pending， promise2保持pending直到x变为fulfilled或rejected\")]),t(\"li\",[e._v(\"若/当x为fulfilled， fulfilled promise2 with same value\")]),t(\"li\",[e._v(\"若/当x为rejected， rejected promise2 with  same reason\")])])])]),t(\"p\",[e._v(\"2.如果\"),t(\"code\",[e._v(\"onFulfilled\")]),e._v(\" 或 \"),t(\"code\",[e._v(\"onRejected\")]),e._v(\"抛出了异常\"),t(\"code\",[e._v(\"e\")]),e._v(\", 则\"),t(\"code\",[e._v(\"promise2\")]),e._v(\"应当以\"),t(\"code\",[e._v(\"e\")]),e._v(\"为\"),t(\"code\",[e._v(\"reason\")]),e._v(\"转化成\"),t(\"code\",[e._v(\"rejected\")]),e._v(\"。\")]),t(\"p\",[e._v(\"3.如果 \"),t(\"code\",[e._v(\"onFulfilled\")]),e._v(\" 不是一个函数且\"),t(\"code\",[e._v(\"promise1\")]),e._v(\"已经fulfilled，则\"),t(\"code\",[e._v(\"promise2\")]),e._v(\"必须以\"),t(\"code\",[e._v(\"promise1\")]),e._v(\"的值fulfilled.\")]),t(\"p\",[e._v(\"4.如果 \"),t(\"code\",[e._v(\"OnReject\")]),e._v(\" 不是一个函数且\"),t(\"code\",[e._v(\"promise1\")]),e._v(\"已经rejected, 则\"),t(\"code\",[e._v(\"promise2\")]),e._v(\"必须以相同的reason被拒绝.\")]),t(\"h3\",{attrs:{id:\"catch方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#catch方法\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Catch方法\")]),t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"promise.catch(onRejected)\\n\")])]),t(\"p\",[e._v(\"是以下代码的别名\")]),t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"promise.then(null, onRejected)\\n\")])]),t(\"p\",[e._v(\"因此可以使用链式调用\")]),t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"promise\\n\\t.then(() => {})\\n\\t.then(() => {})\\n\\t.then(() => {})\\n\\t.catch(() => {})\\n\")])]),t(\"p\",[e._v(\"无论哪里出错，最后catch都能捕获， 而不用在每个then里都写一个\"),t(\"code\",[e._v(\"OnReject\")])]),t(\"h3\",{attrs:{id:\"promise-all\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#promise-all\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Promise.all()\")]),t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"const p = Promise.all([p1, p2, p3])\\n\")])]),t(\"p\",[e._v(\"接受一个数组为参数\")]),t(\"blockquote\",[t(\"p\",[t(\"code\",[e._v(\"p\")]),e._v(\"的状态由\"),t(\"code\",[e._v(\"p1\")]),e._v(\"、\"),t(\"code\",[e._v(\"p2\")]),e._v(\"、\"),t(\"code\",[e._v(\"p3\")]),e._v(\"决定，分成两种情况。\")]),t(\"p\",[e._v(\"（1）只有\"),t(\"code\",[e._v(\"p1\")]),e._v(\"、\"),t(\"code\",[e._v(\"p2\")]),e._v(\"、\"),t(\"code\",[e._v(\"p3\")]),e._v(\"的状态都变成\"),t(\"code\",[e._v(\"fulfilled\")]),e._v(\"，\"),t(\"code\",[e._v(\"p\")]),e._v(\"的状态才会变成\"),t(\"code\",[e._v(\"fulfilled\")]),e._v(\"，此时\"),t(\"code\",[e._v(\"p1\")]),e._v(\"、\"),t(\"code\",[e._v(\"p2\")]),e._v(\"、\"),t(\"code\",[e._v(\"p3\")]),e._v(\"的返回值组成一个数组，传递给\"),t(\"code\",[e._v(\"p\")]),e._v(\"的回调函数。\")]),t(\"p\",[e._v(\"（2）只要\"),t(\"code\",[e._v(\"p1\")]),e._v(\"、\"),t(\"code\",[e._v(\"p2\")]),e._v(\"、\"),t(\"code\",[e._v(\"p3\")]),e._v(\"之中有一个被\"),t(\"code\",[e._v(\"rejected\")]),e._v(\"，\"),t(\"code\",[e._v(\"p\")]),e._v(\"的状态就变成\"),t(\"code\",[e._v(\"rejected\")]),e._v(\"，此时第一个被\"),t(\"code\",[e._v(\"reject\")]),e._v(\"的实例的返回值，会传递给\"),t(\"code\",[e._v(\"p\")]),e._v(\"的回调函数。\")])])])}],!1,null,null,null);r.default=v.exports}}]);","extractedComments":[]}